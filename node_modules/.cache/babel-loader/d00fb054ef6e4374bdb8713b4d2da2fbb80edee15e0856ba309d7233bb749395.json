{"ast":null,"code":"import ChessService from '../services/ChessService';\nimport Board from './Board.vue';\nexport default {\n  name: '',\n  data() {\n    return {\n      position: \"\",\n      checkmateWhite: false,\n      checkmateBlack: false,\n      submiter: Number\n    };\n  },\n  components: {\n    Board\n  },\n  methods: {\n    getPosition() {\n      ChessService.getPosition().then(response => {\n        if (response.status == 200) {\n          this.position = response.data.position;\n          this.checkmateBlack = response.data.checkmateBlack;\n          this.checkmateWhite = response.data.checkmateWhite;\n        }\n      });\n    },\n    undo(val) {\n      if (val == null) {\n        return;\n      }\n      ChessService.undo(val);\n    },\n    move(move) {\n      ChessService.putMove(move).then(response => {\n        if (response.status == 200) {\n          if (response.data != null) {\n            this.$parent.getPosition();\n            if (response.data.possibleMoves != null) {\n              this.possibleMoves = response.data.possibleMoves;\n              this.highlight = response.data.selected;\n              this.checkmateBlack = response.data.checkmateBlack;\n              this.checkmateWhite = response.data.checkmateWhite;\n            } else {\n              this.checkmateBlack = response.data.checkmateBlack;\n              this.checkmateWhite = response.data.checkmateWhite;\n              this.possibleMoves = [];\n              this.highlight = 0;\n            }\n          }\n        }\n      });\n    }\n  },\n  created() {\n    this.getPosition();\n  }\n};","map":{"version":3,"names":["ChessService","Board","name","data","position","checkmateWhite","checkmateBlack","submiter","Number","components","methods","getPosition","then","response","status","undo","val","move","putMove","$parent","possibleMoves","highlight","selected","created"],"sources":["/home/atoste/chessFrontend/src/components/Chess.vue"],"sourcesContent":["<template>\n\n   \n    <div>\n        <Board :position=\"position\" :checkmateWhite=\"checkmateWhite\" :checkmateBlack=\"checkmateBlack\"></Board>\n        <input type=\"number\" v-model=\"submiter\"/>\n        <button @click=\"undo(submiter)\"></button>\n    </div>\n</template>\n\n<script>\n    import ChessService from '../services/ChessService'\n    import Board from './Board.vue';\n    export default{\n        name: '',\n        data(){\n            return { \n                position: \"\",\n                checkmateWhite: false,\n                checkmateBlack: false,\n                submiter: Number\n                    \n        }\n        },\n        components:{\n            Board,\n        },\n        methods: {\n            getPosition(){\n                ChessService.getPosition().then((response) =>{\n                    if(response.status == 200){\n                    this.position = response.data.position;\n                    this.checkmateBlack = response.data.checkmateBlack;\n                    this.checkmateWhite = response.data.checkmateWhite;\n                }\n                })\n            },\n            undo(val){\n                if(val == null){\n                    return;\n                }\n                ChessService.undo(val);\n            },\n            move(move){\n                ChessService.putMove(move).then((response) =>{\n                    if(response.status == 200){\n                        if(response.data != null){\n                            this.$parent.getPosition();\n                            if(response.data.possibleMoves != null){\n                                this.possibleMoves = response.data.possibleMoves;\n                                this.highlight = response.data.selected;\n                                this.checkmateBlack = response.data.checkmateBlack;\n                                this.checkmateWhite = response.data.checkmateWhite;\n                            }\n                            else{\n                                this.checkmateBlack = response.data.checkmateBlack;\n                                this.checkmateWhite = response.data.checkmateWhite;\n                                this.possibleMoves = [];\n                                this.highlight = 0;\n                            }\n                        }\n                    }\n                })\n            }\n        },  \n        created(){\n            this.getPosition();\n        }\n    }\n</script>\n"],"mappings":"AAWI,OAAOA,YAAW,MAAO,0BAAyB;AAClD,OAAOC,KAAI,MAAO,aAAa;AAC/B,eAAc;EACVC,IAAI,EAAE,EAAE;EACRC,IAAIA,CAAA,EAAE;IACF,OAAO;MACHC,QAAQ,EAAE,EAAE;MACZC,cAAc,EAAE,KAAK;MACrBC,cAAc,EAAE,KAAK;MACrBC,QAAQ,EAAEC;IAElB;EACA,CAAC;EACDC,UAAU,EAAC;IACPR;EACJ,CAAC;EACDS,OAAO,EAAE;IACLC,WAAWA,CAAA,EAAE;MACTX,YAAY,CAACW,WAAW,EAAE,CAACC,IAAI,CAAEC,QAAQ,IAAI;QACzC,IAAGA,QAAQ,CAACC,MAAK,IAAK,GAAG,EAAC;UAC1B,IAAI,CAACV,QAAO,GAAIS,QAAQ,CAACV,IAAI,CAACC,QAAQ;UACtC,IAAI,CAACE,cAAa,GAAIO,QAAQ,CAACV,IAAI,CAACG,cAAc;UAClD,IAAI,CAACD,cAAa,GAAIQ,QAAQ,CAACV,IAAI,CAACE,cAAc;QACtD;MACA,CAAC;IACL,CAAC;IACDU,IAAIA,CAACC,GAAG,EAAC;MACL,IAAGA,GAAE,IAAK,IAAI,EAAC;QACX;MACJ;MACAhB,YAAY,CAACe,IAAI,CAACC,GAAG,CAAC;IAC1B,CAAC;IACDC,IAAIA,CAACA,IAAI,EAAC;MACNjB,YAAY,CAACkB,OAAO,CAACD,IAAI,CAAC,CAACL,IAAI,CAAEC,QAAQ,IAAI;QACzC,IAAGA,QAAQ,CAACC,MAAK,IAAK,GAAG,EAAC;UACtB,IAAGD,QAAQ,CAACV,IAAG,IAAK,IAAI,EAAC;YACrB,IAAI,CAACgB,OAAO,CAACR,WAAW,EAAE;YAC1B,IAAGE,QAAQ,CAACV,IAAI,CAACiB,aAAY,IAAK,IAAI,EAAC;cACnC,IAAI,CAACA,aAAY,GAAIP,QAAQ,CAACV,IAAI,CAACiB,aAAa;cAChD,IAAI,CAACC,SAAQ,GAAIR,QAAQ,CAACV,IAAI,CAACmB,QAAQ;cACvC,IAAI,CAAChB,cAAa,GAAIO,QAAQ,CAACV,IAAI,CAACG,cAAc;cAClD,IAAI,CAACD,cAAa,GAAIQ,QAAQ,CAACV,IAAI,CAACE,cAAc;YACtD,OACI;cACA,IAAI,CAACC,cAAa,GAAIO,QAAQ,CAACV,IAAI,CAACG,cAAc;cAClD,IAAI,CAACD,cAAa,GAAIQ,QAAQ,CAACV,IAAI,CAACE,cAAc;cAClD,IAAI,CAACe,aAAY,GAAI,EAAE;cACvB,IAAI,CAACC,SAAQ,GAAI,CAAC;YACtB;UACJ;QACJ;MACJ,CAAC;IACL;EACJ,CAAC;EACDE,OAAOA,CAAA,EAAE;IACL,IAAI,CAACZ,WAAW,EAAE;EACtB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}